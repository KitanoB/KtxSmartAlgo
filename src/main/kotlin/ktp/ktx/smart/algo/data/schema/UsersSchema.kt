package ktp.ktx.smart.algo.data.schema

import kotlinx.coroutines.Dispatchers
import kotlinx.serialization.Serializable
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.transactions.experimental.newSuspendedTransaction
import org.jetbrains.exposed.sql.transactions.transaction

@Serializable
data class ExposedUser(
    val id: Int? = null, // Nullable for new users (auto-generated by the database),
    var username: String,
    var email: String,
    var passwordHash: String, // Store hashed passwords for security
    var lastLoginDate: Long? = null,
    val createdAt: Long? = null,
    var isBanned: Boolean = false,
)

class UserService(private val database: Database) {
    object Users : Table() {
        val id = integer("id").autoIncrement()
        val username = varchar("username", 50)
        val email = varchar("email", 50)
        val passwordHash = varchar("passwordHash", 50)
        val lastLoginDate = long("lastLoginDate").nullable()
        val createdAt = long("createdAt").nullable()
        val isBanned = bool("isBanned").default(false)
        override val primaryKey = PrimaryKey(id)
    }

    init {
        transaction(database) {
            SchemaUtils.create(Users)
        }
    }

    private suspend fun <T> dbQuery(block: suspend () -> T): T =
        newSuspendedTransaction(Dispatchers.IO) { block() }

    suspend fun create(user: ExposedUser): Int = dbQuery {
        Users.insert {
            it[username] = user.username
            it[email] = user.email
            it[passwordHash] = user.passwordHash
            it[lastLoginDate] = user.lastLoginDate
            it[createdAt] = user.createdAt
            it[isBanned] = user.isBanned
        }[Users.id]
    }

    suspend fun read(id: Int): ExposedUser? {
        return dbQuery {
            Users.select { Users.id eq id }
                .map {
                    ExposedUser(
                        it[Users.id],
                        it[Users.username],
                        it[Users.email],
                        it[Users.passwordHash],
                        it[Users.lastLoginDate],
                        it[Users.createdAt],
                        it[Users.isBanned]
                    )
                }.singleOrNull()
        }
    }
    suspend fun getNbUsers(): Long {
       return dbQuery {
                Users.selectAll().count()
            }
    }

    suspend fun update(id: Int, user: ExposedUser) {
        dbQuery {
            Users.update({ Users.id eq id }) {
                it[username] = user.username
                it[email] = user.email
                it[passwordHash] = user.passwordHash
                it[lastLoginDate] = user.lastLoginDate
                it[createdAt] = user.createdAt
                it[isBanned] = user.isBanned
            }
        }
    }

    suspend fun delete(id: Int) {
        dbQuery {
            Users.deleteWhere { Users.id.eq(id) }
        }
    }

    suspend fun clear() {
        dbQuery {
            Users.deleteAll()
        }
    }
}
